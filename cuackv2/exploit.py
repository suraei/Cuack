import subprocess
import os
from utils import print_info, print_success, print_error
import xml.etree.ElementTree as ET

def extraer_productos_versiones(xml_file):
    productos_versiones = set()

    tree = ET.parse(xml_file)
    root = tree.getroot()

    for service in root.findall(".//service"):
        product = service.get('product')
        version = service.get('version')
        if product and version:
            productos_versiones.add((product, version))
        elif product:
            productos_versiones.add((product, ''))

    return productos_versiones


import subprocess
import os
from utils import print_info, print_success, print_error

def run_searchsploit(nmap_xml_file, results_directory, domain):
    productos_versiones = extraer_productos_versiones(nmap_xml_file)
    contenido_a_guardar = ""  # Inicializa una variable para acumular la salida que potencialmente se guardará

    print_info("Buscando exploits conocidos para los servicios identificados...")

    for producto, version in productos_versiones:
        # Construye el comando considerando si hay una versión específica
        command = f"searchsploit {producto} {version}" if version else f"searchsploit {producto}"
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)

        # Verifica si la salida contiene resultados relevantes
        if "No matches found" not in result.stdout:
            contenido_a_guardar += f"Searchsploit para: {producto} {version}\n{result.stdout}\n"
        else:
            print_error(f"No se encontraron exploits para: {producto} {version}")

    # Si después de iterar no hay contenido relevante, imprime un mensaje y no crea el archivo
    if contenido_a_guardar.strip() == "":
        print_error("No se encontraron exploits relevantes para ninguno de los servicios.")
    else:
        # Si se encontraron exploits, guarda la salida en el archivo
        output_file = os.path.join(results_directory, f"{domain}.searchsploit")
        with open(output_file, "w") as file:
            file.write(contenido_a_guardar)
        print_success(f"Resultados de Searchsploit guardados en {output_file}")
